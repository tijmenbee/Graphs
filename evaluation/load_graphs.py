import networkx as nx
import os

from tqdm import tqdm
from typing import List

def load_dyn_data(data_path: str) -> List[nx.Graph]:
    """
    Load data generated by Greene et al. (2010)
    Each time step is a separate file with its own communitites and edges 
    """
    temporal_graph = []
    temporal_ids = []
    for com_snapshot_file in os.listdir(data_path):
        if "comm" not in com_snapshot_file:
            continue
        temporal_ids += [int(com_snapshot_file.removesuffix(".comm").removeprefix("switch.")[1:])]

    temporal_ids = sorted(temporal_ids)
    for time_step in tqdm(temporal_ids):
        graph = nx.Graph()
        file_name_edges = f"switch.t{time_step}.edges" if time_step >= 10 else f"switch.t0{time_step}.edges"
        with open(os.path.join(data_path,file_name_edges), "r") as file:
            while edge := file.readline():
                source, target = edge.strip().split(" ")
                graph.add_edge(source, target)

        file_name_coms = f"switch.t{time_step}.comm" if time_step >= 10 else f"switch.t0{time_step}.comm"
        community_id = 0
        with open(os.path.join(data_path,file_name_coms), "r") as file:
            while community := file.readline():
                community = community.strip().split(" ")
                for member in community:
                    graph.nodes[member]["community_id"] = community_id
                    graph.nodes[member]["community"] = community
                community_id += 1
        temporal_graph += [graph]

    return temporal_graph